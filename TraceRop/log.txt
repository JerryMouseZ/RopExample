                       FunctionExit                                           #

                       Ret            s0[CanBeTaggedValue_Int].var!           #007e 

    s0[CanBeTaggedValue_Int].var = ToVar  s107(s0).i32!                       #007e 

                       StatementBoundary  #-1                                 #007e 





  Line  19: }

  Col    1: ^

                       StatementBoundary  #16                                 #007e 

    s107(s0).i32    =  Add_I4         s106(s61).i32!, s94(s50).i32!           #0075 

    s106(s61).i32   =  Add_I4         s105(s60).i32!, s91(s31).i32!           #0071 

    s105(s60).i32   =  Add_I4         s104(s59).i32!, s90(s30).i32!           #006d 

    s104(s59).i32   =  Add_I4         s103(s58).i32!, s88(s28).i32!           #0069 

    s103(s58).i32   =  Add_I4         s102(s57).i32!, s87(s27).i32!           #0065 

    s102(s57).i32   =  Add_I4         s101(s56).i32!, s86(s26).i32!           #0061 

    s101(s56).i32   =  Add_I4         s100(s55).i32!, s85(s25).i32!           #005d 

    s100(s55).i32   =  Add_I4         s99(s54).i32!, s84(s24).i32!            #0059 

    s99(s54).i32    =  Add_I4         s98(s53).i32!, s83(s23).i32!            #0055 

    s98(s53).i32    =  Add_I4         s97(s52).i32!, s82(s22).i32!            #0051 

    s97(s52).i32    =  Add_I4         s96(s51).i32!, s81(s21).i32!            #004d 

    s96(s51).i32    =  Add_I4         s79(s19).i32!, s80(s20).i32!            #0049 





  Line  18: return ecx + r9d + r8d + edi + esi + edx + r15d + r14d + r13d + r12d + r1 + r2 + s;

  Col    4: ^

                       StatementBoundary  #15                                 #0049 

    s94(s50).i32    =  Sub_I4         s93(s49).i32!, 61 (0x3D).i32            #0042 





  Line  17: let s = eax + ebx * 2 - 0x3d; 

  Col    5: ^

                       StatementBoundary  #14                                 #003a 

    s91(s31).i32    =  And_I4         s91(s31).i32!, 35 (0x23).i32            #0036 





  Line  16: r2 &= 0x23;

  Col    5: ^

                       StatementBoundary  #13                                 #0036 

    s90(s30).i32    =  And_I4         s90(s30).i32!, 34 (0x22).i32            #0032 





  Line  15: r1 &= 0x22;

  Col    5: ^

                       StatementBoundary  #12                                 #0032 

    s89(s29).i32    =  And_I4         s89(s29).i32!, 33 (0x21).i32            #002e 





  Line  14: ebx &= 0x21;

  Col    5: ^

                       StatementBoundary  #11                                 #002e 

    s88(s28).i32    =  And_I4         s88(s28).i32!, 32 (0x20).i32            #002a 





  Line  13: r12d &= 0x20;

  Col    5: ^

                       StatementBoundary  #10                                 #002a 

    s87(s27).i32    =  And_I4         s87(s27).i32!, 25 (0x19).i32            #0026 





  Line  12: r13d &= 0x19;

  Col    5: ^

                       StatementBoundary  #9                                  #0026 

    s86(s26).i32    =  And_I4         s86(s26).i32!, 24 (0x18).i32            #0022 





  Line  11: r14d &= 0x18;

  Col    5: ^

                       StatementBoundary  #8                                  #0022 

    s85(s25).i32    =  And_I4         s85(s25).i32!, 23 (0x17).i32            #001e 





  Line  10: r15d &= 0x17;

  Col    5: ^

                       StatementBoundary  #7                                  #001e 

    s84(s24).i32    =  And_I4         s84(s24).i32!, 22 (0x16).i32               # 001a   

    



  Line   9:       e d x   & =   0x16FunctionExit ; 

   Col    5: ^

                                              StatementBoundary    #6                              # 

                               # 001a  

          s83 (s23) .i32Ret         =     And_I4             s83(s23).i32!, 132 (0x84)21 (0x15)..i32i32                         # 0016   

      



  Line   8:    e s#i &=0085  0

x15;

  Col    5: ^

                                StatementBoundary    #5                          StLoopBodyCount        s26  . i32 !                    # 0016   

          s82 (s22) . i32         =     And_I4 #  0085   

    s82(s22).i32!, 20 (0x14).i32            #0012   

  s28(s27



  Line   7: l[65])edi &=[CanBeTaggedValue_Int] .0varx!1 4=; 

StSlot   Col    5: ^

   s21      [CanBeTaggedValue_Int] . var !   #  0085   

      StatementBoundary  #4                              s21      [CanBeTaggedValue_Int] . var# 0012=  

ToVar     s80 (s21)s81.(s21)i32.!i32         =     And_I4                 s81 (s21) . i32 ! ,  #19 (0x13)0085. i32

            #000e 

 



  Line   6:   r 8 d   & =   0 x 1 3 ; 

   Col    5: ^

               StatementBoundary      #-1                      StatementBoundary    #3                                        #  0084   

                 # 000e   

          s80 (s20) . i32        =StatementBoundary    #4And_I4                  s80 (s20) . i32 ! ,   18 (0x12) . i32                         # 000a   

#0084 



  Line   5: 

   r 9 d   & =   0 x 1 2 ; 

    Col    5: ^

              SpeculatedLoadFence                               StatementBoundary    #2                                    #  0084   

                   # 000a   

          s79 (s19) . i32        =Br     And_I4                  s79 (s19).$L1i32 ! ,  17 (0x11) . i32                         # 0006   

        



  Line   4:        e c#x 007f& =

 0x11 ; 

   Col    5: ^

   s80  (s21) . i32         =      Add_I4                 StatementBoundary s80 (s21)#1. i32 ! ,     1 (0x1) . i32                             #  007c   

      #0006 

    s78(s18).i32    =  And_I4    



  Line  22:      s78(s18).i32i!+, +16 (0x10)).

i32     Col   29: ^

                 # 0002   

           s91 (s31) . i32     StatementBoundary   = #3  FromVar                s31     [LikelyCanBeTaggedValue_Int] . var !         # 0002     Bailout: #0002    (BailOutOnNotPrimitive) 

    #007c 

                       CallI          s23[LikelyCanBeTaggedValue_Object].var!, arg15(s45)<112>.var! #0072 

    s90(s30).i32    =  FromVar        s30[LikelyCanBeTaggedValue_Int].var     #0002  Bailout: #0002 (BailOutOnNotPrimitive)

    s89(s29).i32    =  FromVar        s29[LikelyCanBeTaggedValue_Int].var     #0002  Bailout: #0002 (BailOutOnNotPrimitive)

    s88(s28).i32    =     FromVar     s30 . var    s28    [LikelyCanBeTaggedValue_Int] . var  =      #LoweredStartCall 0002   Bailout: #000215 (0xF) (BailOutOnNotPrimitive).

i32                         #002a 

    s23[LikelyCanBeTaggedValue_Object].var = LdRootMethodFld  s29(s1[Object]->jsc58c3)<    s870,m,(s27).~-,i32s? ,s?  > =  FromVar  [LikelyCanBeTaggedValue_Object] . var !   # 0024s27 

[LikelyCanBeTaggedValue_Int].var     #0002  Bailout: #0002 (BailOutOnNotPrimitive)





  Line  24: jsc58c3(0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xc1 0 ,   0s86x(s26)c.1i321 ,   0 x=c 1 2FromVar ,   0 x c 1 3 )s26;

[LikelyCanBeTaggedValue_Int]  Col    2: ^

. var           # 0002     Bailout: #0002  (BailOutOnNotPrimitive) 

          StatementBoundary  #2                                  #0024 

                       BrGe_I4          s85 (s25) .i32$L8 ,   s80 =(s21) . i32FromVar ,     65536 (0x10000) . i32  s25 #[LikelyCanBeTaggedValue_Int]001c. var

     #0002    Bailout: #0002  (BailOutOnNotPrimitive) 

s26.i32         =  IncrLoopBodyCount  s26.i32!                            #001c 

    s84(s24).i32   



  Line  22:  =  FromVar i   <   0 x 1 0s24000[LikelyCanBeTaggedValue_Int];. vari + + ) 

 #  Col   16: ^

0002     Bailout: #0002  (BailOutOnNotPrimitive) 

                  StatementBoundary  #1                                  #001c 

                        s83 (s23) . i32BailTarget         =     FromVar               s23    [LikelyCanBeTaggedValue_Int] . var           # 0002     Bailout: #0002  (BailOutOnNotPrimitive) 

            #      Bailout: #001c (BailOutShared)

    s80(s21).i32    =  FromVar        s21 [LikelyCanBeTaggedValue_Int] . var   s82 (s22) . i32#        =    Bailout: #001cFromVar   (BailOutIntOnly) 

     s22[LikelyCanBeTaggedValue_Int].var     #0002  Bailout: #0002 (BailOutOnNotPrimitive)

    s81(s21).i32    =  FromVar        s21[LikelyCanBeTaggedValue_Int].var     #0002  Bailout: #0002 (BailOutOnNotPrimitive)

    s26.var         =  InitLoopBodyCount                                     s80 (s20) . i32    #  001a=  

 FromVar          s20  s19[LikelyCanBeTaggedValue_Int].var   [Undefined] . var# 0002=   Ld_A Bailout: #0002  (BailOutOnNotPrimitive) 

      0xXXXXXXXX (undefined)[Undefined].var   #

    s1[Object].var  =  Ld_A           0xXXXXXXXX (GlobalObject)[Object].var   #

    s21[LikelyCanBeTaggedValue_Int].var = LdSlot      s28(s79s27(s19)l[65].)i32    [LikelyCanBeTaggedValue_Int]=. var !FromVar   # 

     s19 [LikelyCanBeTaggedValue_Int] . var   s27 . u64  # 0002     Bailout: #0002  (BailOutOnNotPrimitive) 

  =  ArgIn_A        prm1<32>.var!                           #

                       FunctionEntry          s78 (s18) . i32         =     FromVar                s18    [LikelyCanBeTaggedValue_Int] . var           # 0002     Bailout: #0002  (BailOutOnNotPrimitive)#







  Line   3: eax &= 0x10;

  Col    5: ^

                       StatementBoundary  #0                                  #0002 

    s31[LikelyCanBeTaggedValue_Int].var = ArgIn_A  prm15<144>[LikelyCanBeTaggedValue_Int].var! #

                       FunctionEntry                                          #

-----------------------------------------------------------------------------

Function Global code ( (#1.0), #1)                Instr Count:173		Size:748



7F8EEA3B0000           FunctionEntry  

7F8EEA3B0001   (rax).i64 = MOV        0x562209183810 (&StackLimit).u64

7F8EEA3B000B   (rax).i64 = MOV        [(rax).i64].i64

7F8EEA3B000E   (rax).i64 = ADD        (rax).i64, 7392 (0x1CE0).i64

7F8EEA3B0015           CMP            (rsp).i64, (rax).i64

7F8EEA3B0018           JLE            $L19

7F8EEA3B001E           NOP            4 (0x4).i8

7F8EEA3B0022           NOP            4 (0x4).i8

7F8EEA3B0026           NOP            4 (0x4).i8

7F8EEA3B002A           PrologStart    

7F8EEA3B002A           PUSH           (rbp).i64

7F8EEA3B002C   (rbp).i64 = MOV        (rsp).i64

7F8EEA3B002F   (rsp).i64 = SUB        (rsp).i64, 144 (0x90).i64

7F8EEA3B0036           PUSH           (r15).i64

7F8EEA3B0038           PUSH           (r14).i64

7F8EEA3B003A           PUSH           (r13).i64

7F8EEA3B003C           PUSH           (r12).i64

7F8EEA3B003E           PUSH           (rbx).i64

7F8EEA3B0040   (rsp).i64 = SUB        (rsp).i64, 152 (0x98).i64

7F8EEA3B0047           PrologEnd      

7F8EEA3B0047   s107(rbx).u64 = MOV    0x1000000000C13.var

7F8EEA3B0051   s107<-48>.u64 = MOV    s107(rbx).u64

7F8EEA3B0055   s100(r12).u64 = MOV    0x7F8EEB501DF4 (Unknown).u64

7F8EEA3B005F   s100<-24>.u64 = MOV    s100(r12).u64

7F8EEA3B0063   s27(r13).u64 = MOV     prm1<32>.var!

7F8EEA3B0067   s27<-8>.u64 = MOV      s27(r13).u64

7F8EEA3B006B   s21(r14)[LikelyCanBeTaggedValue_Int].var = MOV  [s27(r13).u64+520].var

7F8EEA3B0072   s21<-16>.var = MOV     s21(r14).var

7F8EEA3B0076   s26(r15).i32 = XOR     s26(r15).i32, s26(r15).i32

7F8EEA3B0079   s128(rax)[LikelyCanBeTaggedValue_Int].var = MOV  s21(r14)[LikelyCanBeTaggedValue_Int].var

7F8EEA3B007C   s129(rcx).i64 = MOV    s128(rax)[LikelyCanBeTaggedValue_Int].var

7F8EEA3B007F   s129(rcx).i64 = SHR    s129(rcx).i64, 48 (0x30).i8

7F8EEA3B0083           CMP            s129(rcx).i64, 1 (0x1).i32

7F8EEA3B0087           JNE            $L17

7F8EEA3B008D   s80(s21)(r13).i32 = MOV_TRUNC  s128(rax)[LikelyCanBeTaggedValue_Int].i32

7F8EEA3B0090  $L1: >>>>>>>>>>>>>  LOOP TOP  >>>>>>>>>>>>> Implicit call: no

7F8EEA3B0090  



  Line  22: i < 0x10000; i++)

  Col   16: ^

                       StatementBoundary  #1

7F8EEA3B0090   [s100(r12).u64-16899084 <0x7F8EEA4E41E8 (Unknown)>].u32 = MOV  s26(r15).i32

7F8EEA3B0098   s26(r15).i32 = INC     s26(r15).i32!

7F8EEA3B009B           CMP            s80(s21)(r13).i32, 65536 (0x10000).i32

7F8EEA3B00A2           JGE            $L18

7F8EEA3B00A8  



  Line  24: jsc58c3(0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xc10, 0xc11, 0xc12, 0xc13);

  Col    2: ^

                       StatementBoundary  #2

7F8EEA3B00A8   s127(rax).u64 = MOV    [s100(r12).u64+8732 <0x7F8EEB504010 (Unknown)>].u64

7F8EEA3B00B0   s23(rdi)[LikelyCanBeTaggedValue_Object].var = MOV  [s127(rax).u64+80].var

7F8EEA3B00B4   s120(rcx).u64 = LEA    [s107(rbx).u64-2899 <0x10000000000C0>].u64

7F8EEA3B00BB   s120<-40>.u64 = MOV    s120(rcx).u64

7F8EEA3B00BF   s119(r8).u64 = LEA     [s107(rbx).u64-2898 <0x10000000000C1>].u64

7F8EEA3B00C6   s119<-56>.u64 = MOV    s119(r8).u64

7F8EEA3B00CA   s118(r9).u64 = LEA     [s107(rbx).u64-2897 <0x10000000000C2>].u64

7F8EEA3B00D1   s117(rax).u64 = LEA    [s107(rbx).u64-2896 <0x10000000000C3>].u64

7F8EEA3B00D8   s116(rdx).u64 = LEA    [s107(rbx).u64-2895 <0x10000000000C4>].u64

7F8EEA3B00DF   s115(rsi).u64 = LEA    [s107(rbx).u64-2894 <0x10000000000C5>].u64

7F8EEA3B00E6   s114(r10).u64 = LEA    [s107(rbx).u64-2893 <0x10000000000C6>].u64

7F8EEA3B00ED   s113(r11).u64 = LEA    [s107(rbx).u64-2892 <0x10000000000C7>].u64

7F8EEA3B00F4   s112(r14).u64 = LEA    [s107(rbx).u64-2891 <0x10000000000C8>].u64

7F8EEA3B00FB   s112<-64>.u64 = MOV    s112(r14).u64

7F8EEA3B00FF   s111(r12).u64 = LEA    [s107(rbx).u64-2890 <0x10000000000C9>].u64

7F8EEA3B0106   s26<-32>.var = MOV     s26(r15).var

7F8EEA3B010A   s110(r15).u64 = LEA    [s107(rbx).u64-3 <0x1000000000C10>].u64

7F8EEA3B010E   s109(rcx).u64 = LEA    [s107(rbx).u64-2 <0x1000000000C11>].u64

7F8EEA3B0112   s108(rbx).u64 = LEA    [s107(rbx).u64-1 <0x1000000000C12>].u64

7F8EEA3B0116   s102(r8).i64 = MOV     s23(rdi)[LikelyCanBeTaggedValue_Object].var!

7F8EEA3B0119   s102(r8).i64 = SHR     s102(r8).i64, 48 (0x30).i8

7F8EEA3B011D           JNE            $L9

7F8EEA3B0123  $L10:

7F8EEA3B0123   s106(r8).i64 = MOV     [s23(rdi)[LikelyCanBeTaggedValue_Object].var+8].i64

7F8EEA3B0127   s106(r8).i64 = MOV     [s106(r8).i64+24].u64

7F8EEA3B012B   s106<-72>.i64 = MOV    s106(r8).i64

7F8EEA3B012F   s107(r14).u64 = MOV    s107<-48>.u64

7F8EEA3B0133   arg15(s45)<128>.var = MOV  s107(r14).u64

7F8EEA3B013B   arg14(s44)<120>.var = MOV  s108(rbx).u64

7F8EEA3B0140   arg13(s43)<112>.var = MOV  s109(rcx).u64

7F8EEA3B0145   arg12(s42)<104>.var = MOV  s110(r15).u64

7F8EEA3B014A   arg11(s41)<96>.var = MOV  s111(r12).u64

7F8EEA3B014F   s112(rcx).u64 = MOV    s112<-64>.u64

7F8EEA3B0153   arg10(s40)<88>.var = MOV  s112(rcx).u64

7F8EEA3B0158   arg9(s39)<80>.var = MOV  s113(r11).u64

7F8EEA3B015D   arg8(s38)<72>.var = MOV  s114(r10).u64

7F8EEA3B0162   arg7(s37)<64>.var = MOV  s115(rsi).u64

7F8EEA3B0167   arg6(s36)<56>.var = MOV  s116(rdx).u64

7F8EEA3B016C   arg5(s35)<48>.var = MOV  s117(rax).u64

7F8EEA3B0171   s119(r11).u64 = MOV    s119<-56>.u64

7F8EEA3B0175   arg3(s33)(r8).var = MOV  s119(r11).u64

7F8EEA3B0178   s120(r10).u64 = MOV    s120<-40>.u64

7F8EEA3B017C   arg2(s32)(rcx).var = MOV  s120(r10).u64

7F8EEA3B017F   arg1(s31)(rdx).var = MOV  0x7F8EEB505030 (undefined)[Undefined].var

7F8EEA3B0189   (rsi).i64 = MOV        268435471 (0x1000000F).i64

7F8EEA3B0190   arg6(s121)<40>.u64 = MOV  (r9).u64

7F8EEA3B0195   arg5(s122)<32>.u64 = MOV  (r8).u64

7F8EEA3B019A   arg4(s123)<24>.u64 = MOV  (rcx).u64

7F8EEA3B019F   arg3(s124)<16>.u64 = MOV  (rdx).u64

7F8EEA3B01A4   arg2(s125)<8>.u64 = MOV  (rsi).u64

7F8EEA3B01A9   arg1(s126)<0>.u64 = MOV  (rdi).u64

7F8EEA3B01AD   s106(rax).i64 = MOV    s106<-72>.i64

7F8EEA3B01B1           CALL           s106(rax).i64

7F8EEA3B01B4  



  Line  22: i++)

  Col   29: ^

                       StatementBoundary  #3

7F8EEA3B01B4   s80(s21)(r13).i32 = INC  s80(s21)(r13).i32!

7F8EEA3B01B7   s107(rbx).i64 = MOV    s107(r14).i64

7F8EEA3B01BA   s100(r12).u64 = MOV    s100<-24>.u64

7F8EEA3B01BE   s26(r15).var = MOV     s26<-32>.var

7F8EEA3B01C2           JMP            $L1

7F8EEA3B01C7  $L18:

7F8EEA3B01C7   s26<-32>.var = MOV     s26(r15).var

7F8EEA3B01CB           StatementBoundary  #4

7F8EEA3B01CB           StatementBoundary  #-1

7F8EEA3B01CB   s101(rax).i32 = MOV_TRUNC  s80(s21)(r13).i32

7F8EEA3B01CE   s101(rax).var = BTS    s101(rax).var, 48 (0x30).i8

7F8EEA3B01D3   s21(rbx)[CanBeTaggedValue_Int].var = MOV  s101(rax).var

7F8EEA3B01D6   s27(r11).u64 = MOV     s27<-8>.u64

7F8EEA3B01DA   [s27(r11).u64+520].var = MOV  s21(rbx)[CanBeTaggedValue_Int].var!

7F8EEA3B01E1   s26(r10).var = MOV     s26<-32>.var

7F8EEA3B01E5   s100(r9).u64 = MOV     s100<-24>.u64

7F8EEA3B01E9   [s100(r9).u64 <0x7F8EEB501DF4 (Unknown)>].u32 = MOV  s26(r10).u32

7F8EEA3B01EC   s99(rax).i64 = MOV     132 (0x84).i64

7F8EEA3B01F3  $L13 (Epilogue):

7F8EEA3B01F3   (rsp).i64 = ADD        (rsp).i64, 152 (0x98).i64

7F8EEA3B01FA   (rbx).i64 = POP        

7F8EEA3B01FC   (r12).i64 = POP        

7F8EEA3B01FE   (r13).i64 = POP        

7F8EEA3B0200   (r14).i64 = POP        

7F8EEA3B0202   (r15).i64 = POP        

7F8EEA3B0204   (rsp).i64 = MOV        (rbp).i64

7F8EEA3B0207   (rbp).i64 = POP        

7F8EEA3B0209           RET            0 (0x0).i32, (rax).i64

7F8EEA3B020A           FunctionExit   

7F8EEA3B020A           StatementBoundary  #-1

7F8EEA3B020A  $L17: [helper]

7F8EEA3B020A   s130(rdi).var = MOV    s21(r14)[LikelyCanBeTaggedValue_Int].var

7F8EEA3B020D   s133(rax).u64 = MOV    GetNonzeroInt32Value_NoTaggedIntCheck.u64

7F8EEA3B0217   s131(rax).i32 = CALL   s133(rax).u64

7F8EEA3B021A   s80(s21)(r13).i32 = MOV  s131(rax).i32

7F8EEA3B021D           TEST           s80(s21)(r13).i32, s80(s21)(r13).i32

7F8EEA3B0220           JNE            $L1

7F8EEA3B0226  $L16: [helper]

7F8EEA3B0226   [s100(r12).u64-189794376 <0x7F8EE00015AC (&BailOutKind)>].u32 = MOV  1 (0x1).u32

7F8EEA3B0232   [s100(r12).u64-189794380 <0x7F8EE00015A8 (Unknown)>].u32 = MOV  4294967295 (0xFFFFFFFF).u32

7F8EEA3B023E   s134(rax).u64 = LEA    [s100(r12).u64-17018356 <0x7F8EEA4C7000 (FunctionBody [Global code (#1.0), #1])>].u64

7F8EEA3B0246   [s100(r12).u64-189794348 <0x7F8EE00015C8 (Unknown)>].u64 = MOV  s134(rax).u64

7F8EEA3B024E  $L12: [helper]

7F8EEA3B024E   (rdi).u64 = MOV        0x7F8EE0001568 (BailOutRecord).u64

7F8EEA3B0258   (rax).u64 = MOV        SaveAllRegistersAndBailOut.u64

7F8EEA3B0262           CALL           (rax).u64                                      Bailout: #001c (BailOutShared)

7F8EEA3B0265           JMP            $L13

7F8EEA3B0267  



  Line  24: jsc58c3(0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xc10, 0xc11, 0xc12, 0xc13);

  Col    2: ^

                       StatementBoundary  #2

7F8EEA3B0267  $L9: [helper]

7F8EEA3B0267   s142<-136>.i64 = MOV   (rdi).i64

7F8EEA3B026E   s141<-128>.i64 = MOV   (rcx).i64

7F8EEA3B0272   s140<-120>.i64 = MOV   (r11).i64

7F8EEA3B0276   s139<-112>.i64 = MOV   (r10).i64

7F8EEA3B027A   s138<-104>.i64 = MOV   (rsi).i64

7F8EEA3B027E   s137<-96>.i64 = MOV    (rdx).i64

7F8EEA3B0282   s136<-88>.i64 = MOV    (rax).i64

7F8EEA3B0286   s135<-80>.i64 = MOV    (r9).i64

7F8EEA3B028A   arg2(s103)(rsi).u64 = MOV  0x5622091B5A18 (ScriptContext).u64

7F8EEA3B0294   arg1(s104)(rdi).u32 = MOV  -2146823286 (0xFFFFFFFF800A138A).u32

7F8EEA3B0299   s105(rax).u64 = MOV    Op_RuntimeTypeError.u64

7F8EEA3B02A3           CALL           s105(rax).u64

7F8EEA3B02A6   (r9).i64 = MOV         s135<-80>.i64

7F8EEA3B02AA   (rax).i64 = MOV        s136<-88>.i64

7F8EEA3B02AE   (rdx).i64 = MOV        s137<-96>.i64

7F8EEA3B02B2   (rsi).i64 = MOV        s138<-104>.i64

7F8EEA3B02B6   (r10).i64 = MOV        s139<-112>.i64

7F8EEA3B02BA   (r11).i64 = MOV        s140<-120>.i64

7F8EEA3B02BE   (rcx).i64 = MOV        s141<-128>.i64

7F8EEA3B02C2   (rdi).i64 = MOV        s142<-136>.i64

7F8EEA3B02C9           JMP            $L10

7F8EEA3B02CE           StatementBoundary  #-1

7F8EEA3B02CE  $L19: [helper]

7F8EEA3B02CE   (rsi).i64 = MOV        0x5622091B5A18 (ScriptContext).u64

7F8EEA3B02D8   (rdi).i64 = MOV        7392 (0x1CE0).i64

7F8EEA3B02DF   (rax).i64 = MOV        ProbeCurrentStack.u64

7F8EEA3B02E9           JMP            (rax).i64

7F8EEA3B02EC           StatementBoundary  #-1

-----------------------------------------------------------------------------

Function jsc58c3 ( (#1.1), #2)                    Instr Count:858		Size:3811



7F8EEA3B1000           FunctionEntry  

7F8EEA3B1000   (rax).i64 = MOV        0x562209183810 (&StackLimit).u64

7F8EEA3B100A   (rax).i64 = MOV        [(rax).i64].i64

7F8EEA3B100D   (rax).i64 = ADD        (rax).i64, 7376 (0x1CD0).i64

7F8EEA3B1014           CMP            (rsp).i64, (rax).i64

7F8EEA3B1017           JLE            $L76

7F8EEA3B101D           NOP            2 (0x2).i8

7F8EEA3B101F           PrologStart    

7F8EEA3B101F           PUSH           (rbp).i64

7F8EEA3B1021   (rbp).i64 = MOV        (rsp).i64

7F8EEA3B1024   (rsp).i64 = SUB        (rsp).i64, 224 (0xE0).i64

7F8EEA3B102B           PUSH           (r15).i64

7F8EEA3B102D           PUSH           (r14).i64

7F8EEA3B102F           PUSH           (r13).i64

7F8EEA3B1031           PUSH           
